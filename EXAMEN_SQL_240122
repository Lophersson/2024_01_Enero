-- PREGUNTA 1:
USE NORTHWIND;
CREATE TABLE TERRITORIOS (
    IDTERRITORIOS INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_TERRITORIOS VARCHAR(20) NOT NULL UNIQUE,
    LOCALIZACION VARCHAR(50)
);

-- PREGUNTA 2:
ALTER TABLE empleado
ADD COLUMN id_territorio INT;

ALTER TABLE empleado
ADD CONSTRAINT fk_empleado_territorio
    FOREIGN KEY (id_territorio)
    REFERENCES territorios(id_territorio); 

-- PREGUNTA 3:
INSERT INTO territorios (Nombre_Territorios, Localizacion) 
VALUES 
('Norte', 'Norte - Noroeste - Nordeste'),
('Centro', 'Central - Suroeste'),
('Sur', 'Sur - Sureste');

-- PREGUNTA 4 PRIMERA OPCIÓN:
UPDATE territorios
SET Nombre_Territorios = 'Norte'
WHERE IDTERRITORIOS IN (SELECT id_territorio FROM empleado WHERE Nombre LIKE 'M%');

UPDATE territorios
SET Nombre_Territorios = 'Centro'
WHERE IDTERRITORIOS IN (SELECT id_territorio FROM empleado WHERE Apellido = 'Fuller');

UPDATE territorios
SET Nombre_Territorios = 'Sur'
WHERE Nombre_Territorios IS NULL OR IDTERRITORIOS NOT IN (
    SELECT id_territorio FROM empleado 
    WHERE Nombre LIKE 'M%' OR Apellido = 'Fuller'
);

-- PREGUNTA 4 SEGUNDA OPCIÓN:
UPDATE empleados
SET Nombre_Territorios = 'Norte'
WHERE Nombre LIKE 'M%';

UPDATE empleados
SET Nombre_Territorios = 'Centro'
WHERE Apellido = 'Fuller';

UPDATE empleados
SET Nombre_Territorios = 'Sur'
WHERE Nombre_Territorios IS NULL OR (Nombre NOT LIKE 'M%' AND Apellido != 'Fuller');

-- PREGUNTA 4 TERCERA OPCIÓN:
UPDATE empleados
SET Territorio = 
    CASE
        WHEN Nombre LIKE 'M%' THEN 'Norte'
        WHEN Apellido = 'Fuller' THEN 'Centro'
        ELSE 'Sur'
    END;

-- PREGUNTA 4, CORTADO:
UPDATE territorios
SET Nombre_Territorios = 'Norte'
WHERE IDTERRITORIOS IN (SELECT id_territorio FROM empleado WHERE Nombre LIKE 'M%');

UPDATE territorios
SET Nombre_Territorios = 'Centro'
WHERE IDTERRITORIOS IN (SELECT id_territorio FROM empleado WHERE Apellido = 'Fuller');

UPDATE territorios
SET Nombre_Territorios = 'Sur'
WHERE Nombre_Territorios IS NULL OR IDTERRITORIOS NOT IN (
    SELECT id_territorio FROM empleado 
    WHERE Nombre LIKE 'M%' OR Apellido = 'Fuller'
);

-- PREGUNTA 5:
DELETE FROM territorios
WHERE Nombre_Territorios = 'Norte' AND Localizacion = 'Norte - Noroeste - Nordeste';

INSERT INTO territorios (Nombre_Territorios, Localizacion) 
VALUES 
('Norte', 'Norte - Noroeste'),
('Centro', 'Central - Suroeste - Nordeste'),
('Sur', 'Sur - Sureste');


DELETE FROM territorios
WHERE Nombre_Territorios = 'Norte' AND Localizacion = 'Norte - Noroeste - Nordeste';

UPDATE territorios
SET Localizacion = 'Central - Suroeste - Nordeste'
WHERE Nombre_Territorios = 'Centro';

INSERT INTO territorios (Nombre_Territorios, Localizacion) 
VALUES 
('Centro', 'Central - Suroeste - Nordeste');

-- PREGUNTA 5 modificada:
-- PREGUNTA 5
-- Actualizar 'Norte' para incluir solo 'Norte' y 'Noroeste'
UPDATE territorios
SET Localizacion = 'Norte - Noroeste'
WHERE Nombre_Territorios = 'Norte';

-- Actualizar 'Centro' para incluir 'Central - Suroeste - Nordeste'
UPDATE territorios
SET Localizacion = 'Central - Suroeste - Nordeste'
WHERE Nombre_Territorios = 'Centro';

DELETE FROM territorios
WHERE Nombre_Territorios = 'Norte' AND Localizacion = 'Norte - Noroeste - Nordeste';

INSERT INTO territorios (Nombre_Territorios, Localizacion) 
VALUES 
('Norte', 'Norte - Noroeste'),
('Centro', 'Central - Suroeste - Nordeste'),
('Sur', 'Sur - Sureste');

-- PREGUNTA 6:
SELECT TituloDeCortesia, Nombre, Apellido, FechaNacimiento, Extension
FROM empleado
WHERE Titulo = 'Sales Representative' 
      AND YEAR(FechaNacimiento) BETWEEN 1960 AND 1969
ORDER BY Nombre ASC;

-- PREGUNTA 7
SELECT pedidos.PedidoID, pedidos.FechaPedido, producto.NombreProducto, cliente.Ciudad AS CiudadDestinatario,
       detallespedido.cantidad, detallesPedido.PrecioUnitario,
       detallesPedido.cantidad * detallesPedido.PrecioUnitario AS Importe
FROM pedidos
JOIN detallespedido ON pedidos.PedidoID = detallespedido.PedidoID
JOIN producto ON detallespedido.ProductoID = producto.ProductoID
JOIN cliente ON pedidos.ClienteID = cliente.ClienteID
WHERE clientes.Pais = 'USA'
ORDER BY Importe DESC;

-- PREGUNTA 8
SELECT proveedor.ProveedorID, COUNT(producto.ProductoID)
FROM proveedor
JOIN producto ON proveedor.ProveedorID = producto.ProveedorID
WHERE producto.UnidadesEnStock >= 3
GROUP BY proveedor.ProveedorID
HAVING COUNT(producto.ProductoID) >= 3 OR MIN(producto.UnidadesEnStock) >= 3;

-- PREGUNTA 9
SELECT NombreCompania, Direccion, Pais
FROM cliente
WHERE ClienteID NOT IN (
    SELECT ClienteID
    FROM pedidos
);

-- PREGUNTA 10
CREATE VIEW ResumenProductoFA AS
SELECT
    producto.NombreProducto,
    proveedor.NombreCompania,
    proveedor.Fax
FROM
    producto
JOIN
    proveedor ON producto.ProveedorID = proveedor.ProveedorID
WHERE
    proveedor.Pais IN ('Germany', 'France');

SELECT * FROM ResumenProductoFA;
